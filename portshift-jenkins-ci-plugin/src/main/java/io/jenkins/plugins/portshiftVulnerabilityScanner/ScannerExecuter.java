package io.jenkins.plugins.portshiftVulnerabilityScanner;

import hudson.FilePath;
import hudson.Launcher;
import hudson.model.Run;
import hudson.model.TaskListener;
import hudson.util.ArgumentListBuilder;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;


public class ScannerExecuter {

  public static final String EXEC_FILE_PATH = "/home/rafael/dev/git/jenkins_plugin/demoo/src/main/resources/io/jenkins/plugins/portshiftVulnerabilityScanner/portshift_deployment_cli";

  public static int execute(Run<?, ?> build, FilePath workspace, Launcher launcher, TaskListener listener,
      String accessKey,
      String secretKey, String imageName, String imageTag, String url) {
    listener.getLogger().println(String
        .format("Hello, you credentials are:%naccessKey: %s%nsecretKey: %s%nimageName: %s%nimageTag: %s%nurl: %s",
            accessKey, secretKey, imageName, imageTag, url));
    try {
      ByteArrayOutputStream output = new ByteArrayOutputStream();
      int exitCode = runExecutable(launcher, listener, accessKey, secretKey, imageName, imageTag, url, output);
      if (exitCode == 0) {
        listener.getLogger().println("Execution succeeded.");
      } else {
        listener.getLogger().println("Execution failed.");
      }

      File outputFile = new File(build.getRootDir(), imageName + "_" + imageTag + "_output");
      try (FileOutputStream outputFileOutputStream = new FileOutputStream(outputFile)) {
        outputFileOutputStream.write(output.toByteArray());
      }
      FilePath latestTarget = new FilePath(workspace, "portshift_latest_scan." + "html");

      writeHtml(listener, latestTarget, output, imageName, imageTag);
      return exitCode;
    } catch (Exception e) {
      listener.getLogger().println("Execution failed: " + e.getMessage());
      return 4;
    }
  }

  private static void writeHtml(TaskListener listener, FilePath latestTarget, ByteArrayOutputStream output,
      String imageName, String imageTag) {
    String html =
        "<!DOCTYPE HTML>\n"
            + "<html lang=\"en\">\n"
            + "<head>\n"
            + "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>"
            + "<title>\n" + imageName + ":" + imageTag + "</title>\n"
            + "</head>\n"
            + "<body>\n"
            + "<h1>\n" + output.toString() + "</h1>\n"
            + "</body>\n"
            + "</html>\n"
            + "\n";
    try (FileOutputStream outputFileOutputStream = new FileOutputStream(latestTarget.getName())) {
      outputFileOutputStream.write(html.getBytes());
    } catch (Exception e) {
      listener.getLogger().println("Failed to save Portshift Vulnerability Scanner HTML report.");
    }
  }

  private static int runExecutable(Launcher launcher, TaskListener listener, String accessKey, String secretKey,
      String imageName, String imageTag, String url, ByteArrayOutputStream output)
      throws IOException, InterruptedException {
    Launcher.ProcStarter ps = launcher.launch();

    ArgumentListBuilder args = new ArgumentListBuilder();
    String executeFileCommand = String.format(
        "%s  run-vulnerability-scan --access-key %s --secret-key %s --image-name %s --image-tag %s --url %s --scanner-ip 192.168.40.88",
        EXEC_FILE_PATH, accessKey, secretKey, imageName, imageTag, url); //TODO --scanner-ip
    args.add("bash", "-c", executeFileCommand);
    ps.cmds(args);
    ps.stdin(null);
    ps.stdout(output);
    ps.stderr(listener.getLogger());

    listener.getLogger().println("Vulnerability scan in progress...");
    int join = ps.join();
    listener.getLogger().println(output.toString());

    return join; // RUN !
  }

}
